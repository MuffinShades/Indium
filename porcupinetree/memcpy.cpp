#include "memcpy.hpp"

//reference https://github.com/skywind3000/FastMemcpy/blob/master/FastMemcpy_Avx.h

#include <stddef.h>
#include <stdint.h>
#include <immintrin.h>
#include <intrin.h>

#include "msutil.hpp"
#include "types.hpp"

#if (defined(_WIN32) || defined(WIN32))
#include <mmsystem.h>
#elif defined(__unix)
#include <sys/time.h>
#include <unistd.h>
#endif

#if (defined(_WIN32) || defined(WIN32) || defined(__unix) || defined(__APPLE__))

//16 byte copy functions
#define loadu_128(src, i) __m128i __m##i = _mm256_loadu_si128(((const __m128i*) src) + i)
#define storeu_128(dest, i) _mm128_storeu_si256(((__m128i*)dest) + i, __m##i)

#define load_128(src, i) __m128i __m##i = _mm128_load_si128(((const __m128i*) src) + i)
#define store_128(dest, i) _mm128_store_si128(((__m128i*)dest) + i, __m##i)

//32 byte copy functins
#define loadu_256(src, i) __m256i __m##i = _mm256_loadu_si256(((const __m256i*) src) + i)
#define storeu_256(dest, i) _mm256_storeu_si256(((__m256i*)dest) + i, __m##i)

#define load_256(src, i) __m256i __m##i = _mm256_load_si256(((const __m256i*) src) + i)
#define store_256(dest, i) _mm256_store_si256(((__m256i*)dest) + i, __m##i)

//64 bytes copy functions
#define loadu_512(src, i) __m512i __m##i = _mm512_loadu_si512(((const __m512i*) src) + i)
#define storeu_512(dest, i) _mm512_storeu_si512(((__m512i*)dest) + i, __m##i)

#define load_512(src, i) __m512i __m##i = _mm512_loadu_si512(((const __m512i*) src) + i)
#define store_512(dest, i) _mm512_storeu_si512(((__m512i*)dest) + i, __m##i)

//copy for 1-16 byte align
#define simple_copy_1(dest, src) *(dest) = *(src)

static void simple_copy_2(void *dest, const void *src) {
	*((u16*)dest) = *((u16*)src);
}

static void simple_copy_4(void *dest, const void *src) {
	*((u32*)dest) = *((u32*)src);
}

static void simple_copy_8(void *dest, const void *src) {
	*((u64*)dest) = *((u64*)src);
}

//avx versions
#define avx_copy_1 simple_copy_1
#define avx_copy_1u simple_copy_1
#define avx_copy_2u simple_copy_2
#define avx_copy_2 simple_copy_2
#define avx_copy_3u simple_copy_4
#define avx_copy_4 simple_copy_4
#define avx_copy_8u simple_copy_8
#define avx_copy_8 simple_copy_8

//true avx copies 16 bytes
static void avx_copy_16u(void *dest, const void *src) {
	loadu_128(src, 0);
	storeu_128(dest, 0);
}

static void avx_copy_16(void *dest, const void *src) {
	load_128(src, 0);
	store_128(dest, 0);
}

//copies 32 bytes
static void avx_copy_32u(void* dest, const void* src) {
#ifdef __AVX512F__
	loadu_512(src, 0);

	storeu_512(dest, 0);
#else
	loadu_256(src, 0);
	loadu_256(src, 1);

	storeu_256(dest, 0);
	storeu_256(dest, 1);
#endif
}


//TODO: 256 -> 16 bytes, 512 -> 32bytes
static void avx_copy_32(void* dest, const void* src) {
	load_256(src, 0);
	store_256(dest, 0);
}

//copies 64 bytes
static void avx_copy_64u(void* dest, const void* src) {
#ifdef __AVX512F__
	loadu_512(src, 0);
	storeu_512(dest, 0);
#else
	loadu_256(src, 0);
	loadu_256(src, 1);
	storeu_256(dest, 0);
	storeu_256(dest, 1);
#endif
}

static void avx_copy_64(void* dest, const void* src) {
#ifdef __AVX512F__
	load_512(src, 0);
	store_512(dest, 0);
#else
	load_256(src, 0);
	load_256(src, 1);
	store_256(dest, 0);
	store_256(dest, 1);
#endif
}

//copies 128 bytes
static void avx_copy_128u(void* dest, const void* src) {
#ifdef __AVX512F__
	loadu_512(src, 0);
	loadu_512(src, 1);
	storeu_512(dest, 0);
	storeu_512(dest, 1);
#else
	loadu_256(src, 0);
	loadu_256(src, 1);
	loadu_256(src, 2);
	loadu_256(src, 3);
	storeu_256(dest, 0);
	storeu_256(dest, 1);
	storeu_256(dest, 2);
	storeu_256(dest, 3);
#endif
}

static void avx_copy_128(void* dest, const void* src) {
#ifdef __AVX512F__
	load_512(src, 0);
	load_512(src, 1);
	store_512(dest, 0);
	store_512(dest, 1);
#else
	load_256(src, 0);
	load_256(src, 1);
	load_256(src, 2);
	load_256(src, 3);
	store_256(dest, 0);
	store_256(dest, 1);
	store_256(dest, 2);
	store_256(dest, 3);
#endif
}

//copies 256 bytes
static void avx_copy_256u(void* dest, const void* src) {
#ifdef __AVX512F__
	loadu_512(src, 0);
	loadu_512(src, 1);
	loadu_512(src, 2);
	loadu_512(src, 3);
	storeu_512(dest, 0);
	storeu_512(dest, 1);
	storeu_512(dest, 2);
	storeu_512(dest, 3);
#else
	loadu_256(src, 0);
	loadu_256(src, 1);
	loadu_256(src, 2);
	loadu_256(src, 3);
	loadu_256(src, 4);
	loadu_256(src, 5);
	loadu_256(src, 6);
	loadu_256(src, 7);
	storeu_256(dest, 0);
	storeu_256(dest, 1);
	storeu_256(dest, 2);
	storeu_256(dest, 3);
	storeu_256(dest, 4);
	storeu_256(dest, 5);
	storeu_256(dest, 6);
	storeu_256(dest, 7);
#endif
}

static void avx_copy_256(void* dest, const void* src) {
#ifdef __AVX512F__
	load_512(src, 0);
	load_512(src, 1);
	load_512(src, 2);
	load_512(src, 3);
	store_512(dest, 0);
	store_512(dest, 1);
	store_512(src, 2);
	store_512(src, 3);
#else
	load_256(src, 0);
	load_256(src, 1);
	load_256(src, 2);
	load_256(src, 3);
	load_256(src, 4);
	load_256(src, 5);
	load_256(src, 6);
	load_256(src, 7);
	store_256(dest, 0);
	store_256(dest, 1);
	store_256(dest, 2);
	store_256(dest, 3);
	store_256(dest, 4);
	store_256(dest, 5);
	store_256(dest, 6);
	store_256(dest, 7);
#endif
}

//copies 512 bytes
static void avx_copy_512u(void* dest, const void* src) {
	loadu_512(src, 0);
	loadu_512(src, 1);
	loadu_512(src, 2);
	loadu_512(src, 3);
	loadu_512(src, 4);
	loadu_512(src, 5);
	loadu_512(src, 6);
	loadu_512(src, 7);
	storeu_512(dest, 0);
	storeu_512(dest, 1);
	storeu_512(dest, 2);
	storeu_512(dest, 3);
	storeu_512(dest, 4);
	storeu_512(dest, 5);
	storeu_512(dest, 6);
	storeu_512(dest, 7);
}

static void avx_copy_512(void* dest, const void* src) {
	load_512(src, 0);
	load_512(src, 1);
	load_512(src, 2);
	load_512(src, 3);
	load_512(src, 4);
	load_512(src, 5);
	load_512(src, 6);
	load_512(src, 7);
	store_512(dest, 0);
	store_512(dest, 1);
	store_512(dest, 2);
	store_512(dest, 3);
	store_512(dest, 4);
	store_512(dest, 5);
	store_512(dest, 6);
	store_512(dest, 7);
}

#define __mini_cpy_group_128(a,cfa,cfb) case a: cfa(dc - a, sc - a); \
	case (a - 128): cfb(dc - (a - 128), sc - (a - 128))

#define __mini_cpy_group_256(a,cfa,cfb) case a: cfa(dc - a, sc - a); \
	case (a - 256): cfb(dc - (a - 256), sc - (a - 256))

#define __cpy_pair_sim(fn, b) simple_copy_##fn(dc - b, sc - b)
#define __cpy_pair_avx(fn, b) avx_copy_##fn(dc - b, sc - b)

#define __mini_line_128(a, b, c, d) __mini_cpy_group_128(a, avx_copy_128u, avx_copy_##b); avx_copy_##c##u(dc - d, sc - b) break;
#define __mini_lin0_128(a, b) __mini_cpy_group_128(a, avx_copy_128u, avx_copy_##b##u); break;

#define __mini_line_256(a, b, c, d) __mini_cpy_group_256(a, avx_copy_256u, avx_copy_##b); avx_copy_##c##u(dc - d, sc - b) break;
#define __mini_lin0_256(a, b) __mini_cpy_group_256(a, avx_copy_256u, avx_copy_##b##u); break;

static void* in_minicpy256(void* dest, const void* src, size_t len) {
	if (!dest || !src || len == 0) return nullptr;
	char* dc = (char*) dest + len;
	const char* sc = (const char*) src + len;

	switch (len) {
	case 128: avx_copy_128u(dc - 128, sc - 128); break;
	case 129: avx_copy_128u(dc - 129, sc - 129);
	case 1:   *dc = *sc; break;
	__mini_lin0_128(0x82,0x2)
	__mini_line_128(0x83,0x2,0x1,0x1)
	__mini_lin0_128(0x84,0x4)
	__mini_line_128(0x85,0x4,0x1,0x1)
	__mini_line_128(0x86,0x4,0x2,0x2)
	__mini_line_128(0x87,0x4,0x4,0x3)
	__mini_lin0_128(0x88,0x8)
	__mini_line_128(0x89,0x8,0x1,0x1)
	__mini_line_128(0x8a,0x8,0x2,0x2)
	__mini_line_128(0x8b,0x8,0x4,0x3)
	__mini_line_128(0x8c,0x8,0x4,0x4)
	__mini_line_128(0x8d,0x8,0x8,0x5)
	__mini_line_128(0x8e,0x8,0x8,0x6)
	__mini_line_128(0x8f,0x8,0x8,0x7)
	__mini_lin0_128(0x90,0x10)
	__mini_line_128(0x91,0x10,0x1,0x1)
	__mini_line_128(0x92,0x10,0x2,0x2)
	__mini_line_128(0x93,0x10,0x4,0x3)
	__mini_line_128(0x94,0x10,0x4,0x4)
	__mini_line_128(0x95,0x10,0x8,0x5)
	__mini_line_128(0x96,0x10,0x8,0x6)
	__mini_line_128(0x97,0x10,0x8,0x7)
	__mini_line_128(0x98,0x10,0x8,0x8)
	__mini_line_128(0x99,0x10,0x10,0x9)
	__mini_line_128(0x9a,0x10,0x10,0xa)
	__mini_line_128(0x9b,0x10,0x10,0xb)
	__mini_line_128(0x9c,0x10,0x10,0xc)
	__mini_line_128(0x9d,0x10,0x10,0xd)
	__mini_line_128(0x9e,0x10,0x10,0xe)
	__mini_line_128(0x9f,0x10,0x10,0xf)
	__mini_lin0_128(0xa0,0x20)
	__mini_line_128(0xa1,0x20,0x1,0x1)
	__mini_line_128(0xa2,0x20,0x2,0x2)
	__mini_line_128(0xa3,0x20,0x4,0x3)
	__mini_line_128(0xa4,0x20,0x4,0x4)
	__mini_line_128(0xa5,0x20,0x8,0x5)
	__mini_line_128(0xa6,0x20,0x8,0x6)
	__mini_line_128(0xa7,0x20,0x8,0x7)
	__mini_line_128(0xa8,0x20,0x8,0x8)
	__mini_line_128(0xa9,0x20,0x10,0x9)
	__mini_line_128(0xaa,0x20,0x10,0xa)
	__mini_line_128(0xab,0x20,0x10,0xb)
	__mini_line_128(0xac,0x20,0x10,0xc)
	__mini_line_128(0xad,0x20,0x10,0xd)
	__mini_line_128(0xae,0x20,0x10,0xe)
	__mini_line_128(0xaf,0x20,0x10,0xf)
	__mini_line_128(0xb0,0x20,0x10,0x10)
	__mini_line_128(0xb1,0x20,0x20,0x11)
	__mini_line_128(0xb2,0x20,0x20,0x12)
	__mini_line_128(0xb3,0x20,0x20,0x13)
	__mini_line_128(0xb4,0x20,0x20,0x14)
	__mini_line_128(0xb5,0x20,0x20,0x15)
	__mini_line_128(0xb6,0x20,0x20,0x16)
	__mini_line_128(0xb7,0x20,0x20,0x17)
	__mini_line_128(0xb8,0x20,0x20,0x18)
	__mini_line_128(0xb9,0x20,0x20,0x19)
	__mini_line_128(0xba,0x20,0x20,0x1a)
	__mini_line_128(0xbb,0x20,0x20,0x1b)
	__mini_line_128(0xbc,0x20,0x20,0x1c)
	__mini_line_128(0xbd,0x20,0x20,0x1d)
	__mini_line_128(0xbe,0x20,0x20,0x1e)
	__mini_line_128(0xbf,0x20,0x20,0x1f)
	__mini_lin0_128(0xc0,0x40)
	__mini_line_128(0xc1,0x40,0x1,0x1)
	__mini_line_128(0xc2,0x40,0x2,0x2)
	__mini_line_128(0xc3,0x40,0x4,0x3)
	__mini_line_128(0xc4,0x40,0x4,0x4)
	__mini_line_128(0xc5,0x40,0x8,0x5)
	__mini_line_128(0xc6,0x40,0x8,0x6)
	__mini_line_128(0xc7,0x40,0x8,0x7)
	__mini_line_128(0xc8,0x40,0x8,0x8)
	__mini_line_128(0xc9,0x40,0x10,0x9)
	__mini_line_128(0xca,0x40,0x10,0xa)
	__mini_line_128(0xcb,0x40,0x10,0xb)
	__mini_line_128(0xcc,0x40,0x10,0xc)
	__mini_line_128(0xcd,0x40,0x10,0xd)
	__mini_line_128(0xce,0x40,0x10,0xe)
	__mini_line_128(0xcf,0x40,0x10,0xf)
	__mini_line_128(0xd0,0x40,0x10,0x10)
	__mini_line_128(0xd1,0x40,0x20,0x11)
	__mini_line_128(0xd2,0x40,0x20,0x12)
	__mini_line_128(0xd3,0x40,0x20,0x13)
	__mini_line_128(0xd4,0x40,0x20,0x14)
	__mini_line_128(0xd5,0x40,0x20,0x15)
	__mini_line_128(0xd6,0x40,0x20,0x16)
	__mini_line_128(0xd7,0x40,0x20,0x17)
	__mini_line_128(0xd8,0x40,0x20,0x18)
	__mini_line_128(0xd9,0x40,0x20,0x19)
	__mini_line_128(0xda,0x40,0x20,0x1a)
	__mini_line_128(0xdb,0x40,0x20,0x1b)
	__mini_line_128(0xdc,0x40,0x20,0x1c)
	__mini_line_128(0xdd,0x40,0x20,0x1d)
	__mini_line_128(0xde,0x40,0x20,0x1e)
	__mini_line_128(0xdf,0x40,0x20,0x1f)
	__mini_line_128(0xe0,0x40,0x20,0x20)
	__mini_line_128(0xe1,0x40,0x40,0x21)
	__mini_line_128(0xe2,0x40,0x40,0x22)
	__mini_line_128(0xe3,0x40,0x40,0x23)
	__mini_line_128(0xe4,0x40,0x40,0x24)
	__mini_line_128(0xe5,0x40,0x40,0x25)
	__mini_line_128(0xe6,0x40,0x40,0x26)
	__mini_line_128(0xe7,0x40,0x40,0x27)
	__mini_line_128(0xe8,0x40,0x40,0x28)
	__mini_line_128(0xe9,0x40,0x40,0x29)
	__mini_line_128(0xea,0x40,0x40,0x2a)
	__mini_line_128(0xeb,0x40,0x40,0x2b)
	__mini_line_128(0xec,0x40,0x40,0x2c)
	__mini_line_128(0xed,0x40,0x40,0x2d)
	__mini_line_128(0xee,0x40,0x40,0x2e)
	__mini_line_128(0xef,0x40,0x40,0x2f)
	__mini_line_128(0xf0,0x40,0x40,0x30)
	__mini_line_128(0xf1,0x40,0x40,0x31)
	__mini_line_128(0xf2,0x40,0x40,0x32)
	__mini_line_128(0xf3,0x40,0x40,0x33)
	__mini_line_128(0xf4,0x40,0x40,0x34)
	__mini_line_128(0xf5,0x40,0x40,0x35)
	__mini_line_128(0xf6,0x40,0x40,0x36)
	__mini_line_128(0xf7,0x40,0x40,0x37)
	__mini_line_128(0xf8,0x40,0x40,0x38)
	__mini_line_128(0xf9,0x40,0x40,0x39)
	__mini_line_128(0xfa,0x40,0x40,0x3a)
	__mini_line_128(0xfb,0x40,0x40,0x3b)
	__mini_line_128(0xfc,0x40,0x40,0x3c)
	__mini_line_128(0xfd,0x40,0x40,0x3d)
	__mini_line_128(0xfe,0x40,0x40,0x3e)
	__mini_line_128(0xff,0x40,0x40,0x3f)
	case 256: avx_copy_256u(dest, src); break;
	default:
		return in_memcpy(dest, src, len);
	}
}

static void* in_minicpy512(void* dest, const void* src, size_t len) {
	if (!dest || !src || len == 0) return nullptr;
	char* dc = (char*) dest;
	const char* sc = (const char*) src;

	switch (len) {
	case 256: avx_copy_256u(dc - 256, sc - 256); break;
	case 257: avx_copy_256u(dc - 257, sc - 257);
	case 1: *dc = *sc; break;
	__mini_lin0_256(0x102,0x2)
	__mini_line_256(0x103,0x2,0x1,0x1)
	__mini_lin0_256(0x104,0x4)
	__mini_line_256(0x105,0x4,0x1,0x1)
	__mini_line_256(0x106,0x4,0x2,0x2)
	__mini_line_256(0x107,0x4,0x4,0x3)
	__mini_lin0_256(0x108,0x8)
	__mini_line_256(0x109,0x8,0x1,0x1)
	__mini_line_256(0x10a,0x8,0x2,0x2)
	__mini_line_256(0x10b,0x8,0x4,0x3)
	__mini_line_256(0x10c,0x8,0x4,0x4)
	__mini_line_256(0x10d,0x8,0x8,0x5)
	__mini_line_256(0x10e,0x8,0x8,0x6)
	__mini_line_256(0x10f,0x8,0x8,0x7)
	__mini_lin0_256(0x110,0x10)
	__mini_line_256(0x111,0x10,0x1,0x1)
	__mini_line_256(0x112,0x10,0x2,0x2)
	__mini_line_256(0x113,0x10,0x4,0x3)
	__mini_line_256(0x114,0x10,0x4,0x4)
	__mini_line_256(0x115,0x10,0x8,0x5)
	__mini_line_256(0x116,0x10,0x8,0x6)
	__mini_line_256(0x117,0x10,0x8,0x7)
	__mini_line_256(0x118,0x10,0x8,0x8)
	__mini_line_256(0x119,0x10,0x10,0x9)
	__mini_line_256(0x11a,0x10,0x10,0xa)
	__mini_line_256(0x11b,0x10,0x10,0xb)
	__mini_line_256(0x11c,0x10,0x10,0xc)
	__mini_line_256(0x11d,0x10,0x10,0xd)
	__mini_line_256(0x11e,0x10,0x10,0xe)
	__mini_line_256(0x11f,0x10,0x10,0xf)
	__mini_lin0_256(0x120,0x20)
	__mini_line_256(0x121,0x20,0x1,0x1)
	__mini_line_256(0x122,0x20,0x2,0x2)
	__mini_line_256(0x123,0x20,0x4,0x3)
	__mini_line_256(0x124,0x20,0x4,0x4)
	__mini_line_256(0x125,0x20,0x8,0x5)
	__mini_line_256(0x126,0x20,0x8,0x6)
	__mini_line_256(0x127,0x20,0x8,0x7)
	__mini_line_256(0x128,0x20,0x8,0x8)
	__mini_line_256(0x129,0x20,0x10,0x9)
	__mini_line_256(0x12a,0x20,0x10,0xa)
	__mini_line_256(0x12b,0x20,0x10,0xb)
	__mini_line_256(0x12c,0x20,0x10,0xc)
	__mini_line_256(0x12d,0x20,0x10,0xd)
	__mini_line_256(0x12e,0x20,0x10,0xe)
	__mini_line_256(0x12f,0x20,0x10,0xf)
	__mini_line_256(0x130,0x20,0x10,0x10)
	__mini_line_256(0x131,0x20,0x20,0x11)
	__mini_line_256(0x132,0x20,0x20,0x12)
	__mini_line_256(0x133,0x20,0x20,0x13)
	__mini_line_256(0x134,0x20,0x20,0x14)
	__mini_line_256(0x135,0x20,0x20,0x15)
	__mini_line_256(0x136,0x20,0x20,0x16)
	__mini_line_256(0x137,0x20,0x20,0x17)
	__mini_line_256(0x138,0x20,0x20,0x18)
	__mini_line_256(0x139,0x20,0x20,0x19)
	__mini_line_256(0x13a,0x20,0x20,0x1a)
	__mini_line_256(0x13b,0x20,0x20,0x1b)
	__mini_line_256(0x13c,0x20,0x20,0x1c)
	__mini_line_256(0x13d,0x20,0x20,0x1d)
	__mini_line_256(0x13e,0x20,0x20,0x1e)
	__mini_line_256(0x13f,0x20,0x20,0x1f)
	__mini_lin0_256(0x140,0x40)
	__mini_line_256(0x141,0x40,0x1,0x1)
	__mini_line_256(0x142,0x40,0x2,0x2)
	__mini_line_256(0x143,0x40,0x4,0x3)
	__mini_line_256(0x144,0x40,0x4,0x4)
	__mini_line_256(0x145,0x40,0x8,0x5)
	__mini_line_256(0x146,0x40,0x8,0x6)
	__mini_line_256(0x147,0x40,0x8,0x7)
	__mini_line_256(0x148,0x40,0x8,0x8)
	__mini_line_256(0x149,0x40,0x10,0x9)
	__mini_line_256(0x14a,0x40,0x10,0xa)
	__mini_line_256(0x14b,0x40,0x10,0xb)
	__mini_line_256(0x14c,0x40,0x10,0xc)
	__mini_line_256(0x14d,0x40,0x10,0xd)
	__mini_line_256(0x14e,0x40,0x10,0xe)
	__mini_line_256(0x14f,0x40,0x10,0xf)
	__mini_line_256(0x150,0x40,0x10,0x10)
	__mini_line_256(0x151,0x40,0x20,0x11)
	__mini_line_256(0x152,0x40,0x20,0x12)
	__mini_line_256(0x153,0x40,0x20,0x13)
	__mini_line_256(0x154,0x40,0x20,0x14)
	__mini_line_256(0x155,0x40,0x20,0x15)
	__mini_line_256(0x156,0x40,0x20,0x16)
	__mini_line_256(0x157,0x40,0x20,0x17)
	__mini_line_256(0x158,0x40,0x20,0x18)
	__mini_line_256(0x159,0x40,0x20,0x19)
	__mini_line_256(0x15a,0x40,0x20,0x1a)
	__mini_line_256(0x15b,0x40,0x20,0x1b)
	__mini_line_256(0x15c,0x40,0x20,0x1c)
	__mini_line_256(0x15d,0x40,0x20,0x1d)
	__mini_line_256(0x15e,0x40,0x20,0x1e)
	__mini_line_256(0x15f,0x40,0x20,0x1f)
	__mini_line_256(0x160,0x40,0x20,0x20)
	__mini_line_256(0x161,0x40,0x40,0x21)
	__mini_line_256(0x162,0x40,0x40,0x22)
	__mini_line_256(0x163,0x40,0x40,0x23)
	__mini_line_256(0x164,0x40,0x40,0x24)
	__mini_line_256(0x165,0x40,0x40,0x25)
	__mini_line_256(0x166,0x40,0x40,0x26)
	__mini_line_256(0x167,0x40,0x40,0x27)
	__mini_line_256(0x168,0x40,0x40,0x28)
	__mini_line_256(0x169,0x40,0x40,0x29)
	__mini_line_256(0x16a,0x40,0x40,0x2a)
	__mini_line_256(0x16b,0x40,0x40,0x2b)
	__mini_line_256(0x16c,0x40,0x40,0x2c)
	__mini_line_256(0x16d,0x40,0x40,0x2d)
	__mini_line_256(0x16e,0x40,0x40,0x2e)
	__mini_line_256(0x16f,0x40,0x40,0x2f)
	__mini_line_256(0x170,0x40,0x40,0x30)
	__mini_line_256(0x171,0x40,0x40,0x31)
	__mini_line_256(0x172,0x40,0x40,0x32)
	__mini_line_256(0x173,0x40,0x40,0x33)
	__mini_line_256(0x174,0x40,0x40,0x34)
	__mini_line_256(0x175,0x40,0x40,0x35)
	__mini_line_256(0x176,0x40,0x40,0x36)
	__mini_line_256(0x177,0x40,0x40,0x37)
	__mini_line_256(0x178,0x40,0x40,0x38)
	__mini_line_256(0x179,0x40,0x40,0x39)
	__mini_line_256(0x17a,0x40,0x40,0x3a)
	__mini_line_256(0x17b,0x40,0x40,0x3b)
	__mini_line_256(0x17c,0x40,0x40,0x3c)
	__mini_line_256(0x17d,0x40,0x40,0x3d)
	__mini_line_256(0x17e,0x40,0x40,0x3e)
	__mini_line_256(0x17f,0x40,0x40,0x3f)
	__mini_lin0_256(0x180,0x80)
	__mini_line_256(0x181,0x80,0x1,0x1)
	__mini_line_256(0x182,0x80,0x2,0x2)
	__mini_line_256(0x183,0x80,0x4,0x3)
	__mini_line_256(0x184,0x80,0x4,0x4)
	__mini_line_256(0x185,0x80,0x8,0x5)
	__mini_line_256(0x186,0x80,0x8,0x6)
	__mini_line_256(0x187,0x80,0x8,0x7)
	__mini_line_256(0x188,0x80,0x8,0x8)
	__mini_line_256(0x189,0x80,0x10,0x9)
	__mini_line_256(0x18a,0x80,0x10,0xa)
	__mini_line_256(0x18b,0x80,0x10,0xb)
	__mini_line_256(0x18c,0x80,0x10,0xc)
	__mini_line_256(0x18d,0x80,0x10,0xd)
	__mini_line_256(0x18e,0x80,0x10,0xe)
	__mini_line_256(0x18f,0x80,0x10,0xf)
	__mini_line_256(0x190,0x80,0x10,0x10)
	__mini_line_256(0x191,0x80,0x20,0x11)
	__mini_line_256(0x192,0x80,0x20,0x12)
	__mini_line_256(0x193,0x80,0x20,0x13)
	__mini_line_256(0x194,0x80,0x20,0x14)
	__mini_line_256(0x195,0x80,0x20,0x15)
	__mini_line_256(0x196,0x80,0x20,0x16)
	__mini_line_256(0x197,0x80,0x20,0x17)
	__mini_line_256(0x198,0x80,0x20,0x18)
	__mini_line_256(0x199,0x80,0x20,0x19)
	__mini_line_256(0x19a,0x80,0x20,0x1a)
	__mini_line_256(0x19b,0x80,0x20,0x1b)
	__mini_line_256(0x19c,0x80,0x20,0x1c)
	__mini_line_256(0x19d,0x80,0x20,0x1d)
	__mini_line_256(0x19e,0x80,0x20,0x1e)
	__mini_line_256(0x19f,0x80,0x20,0x1f)
	__mini_line_256(0x1a0,0x80,0x20,0x20)
	__mini_line_256(0x1a1,0x80,0x40,0x21)
	__mini_line_256(0x1a2,0x80,0x40,0x22)
	__mini_line_256(0x1a3,0x80,0x40,0x23)
	__mini_line_256(0x1a4,0x80,0x40,0x24)
	__mini_line_256(0x1a5,0x80,0x40,0x25)
	__mini_line_256(0x1a6,0x80,0x40,0x26)
	__mini_line_256(0x1a7,0x80,0x40,0x27)
	__mini_line_256(0x1a8,0x80,0x40,0x28)
	__mini_line_256(0x1a9,0x80,0x40,0x29)
	__mini_line_256(0x1aa,0x80,0x40,0x2a)
	__mini_line_256(0x1ab,0x80,0x40,0x2b)
	__mini_line_256(0x1ac,0x80,0x40,0x2c)
	__mini_line_256(0x1ad,0x80,0x40,0x2d)
	__mini_line_256(0x1ae,0x80,0x40,0x2e)
	__mini_line_256(0x1af,0x80,0x40,0x2f)
	__mini_line_256(0x1b0,0x80,0x40,0x30)
	__mini_line_256(0x1b1,0x80,0x40,0x31)
	__mini_line_256(0x1b2,0x80,0x40,0x32)
	__mini_line_256(0x1b3,0x80,0x40,0x33)
	__mini_line_256(0x1b4,0x80,0x40,0x34)
	__mini_line_256(0x1b5,0x80,0x40,0x35)
	__mini_line_256(0x1b6,0x80,0x40,0x36)
	__mini_line_256(0x1b7,0x80,0x40,0x37)
	__mini_line_256(0x1b8,0x80,0x40,0x38)
	__mini_line_256(0x1b9,0x80,0x40,0x39)
	__mini_line_256(0x1ba,0x80,0x40,0x3a)
	__mini_line_256(0x1bb,0x80,0x40,0x3b)
	__mini_line_256(0x1bc,0x80,0x40,0x3c)
	__mini_line_256(0x1bd,0x80,0x40,0x3d)
	__mini_line_256(0x1be,0x80,0x40,0x3e)
	__mini_line_256(0x1bf,0x80,0x40,0x3f)
	__mini_line_256(0x1c0,0x80,0x40,0x40)
	__mini_line_256(0x1c1,0x80,0x80,0x41)
	__mini_line_256(0x1c2,0x80,0x80,0x42)
	__mini_line_256(0x1c3,0x80,0x80,0x43)
	__mini_line_256(0x1c4,0x80,0x80,0x44)
	__mini_line_256(0x1c5,0x80,0x80,0x45)
	__mini_line_256(0x1c6,0x80,0x80,0x46)
	__mini_line_256(0x1c7,0x80,0x80,0x47)
	__mini_line_256(0x1c8,0x80,0x80,0x48)
	__mini_line_256(0x1c9,0x80,0x80,0x49)
	__mini_line_256(0x1ca,0x80,0x80,0x4a)
	__mini_line_256(0x1cb,0x80,0x80,0x4b)
	__mini_line_256(0x1cc,0x80,0x80,0x4c)
	__mini_line_256(0x1cd,0x80,0x80,0x4d)
	__mini_line_256(0x1ce,0x80,0x80,0x4e)
	__mini_line_256(0x1cf,0x80,0x80,0x4f)
	__mini_line_256(0x1d0,0x80,0x80,0x50)
	__mini_line_256(0x1d1,0x80,0x80,0x51)
	__mini_line_256(0x1d2,0x80,0x80,0x52)
	__mini_line_256(0x1d3,0x80,0x80,0x53)
	__mini_line_256(0x1d4,0x80,0x80,0x54)
	__mini_line_256(0x1d5,0x80,0x80,0x55)
	__mini_line_256(0x1d6,0x80,0x80,0x56)
	__mini_line_256(0x1d7,0x80,0x80,0x57)
	__mini_line_256(0x1d8,0x80,0x80,0x58)
	__mini_line_256(0x1d9,0x80,0x80,0x59)
	__mini_line_256(0x1da,0x80,0x80,0x5a)
	__mini_line_256(0x1db,0x80,0x80,0x5b)
	__mini_line_256(0x1dc,0x80,0x80,0x5c)
	__mini_line_256(0x1dd,0x80,0x80,0x5d)
	__mini_line_256(0x1de,0x80,0x80,0x5e)
	__mini_line_256(0x1df,0x80,0x80,0x5f)
	__mini_line_256(0x1e0,0x80,0x80,0x60)
	__mini_line_256(0x1e1,0x80,0x80,0x61)
	__mini_line_256(0x1e2,0x80,0x80,0x62)
	__mini_line_256(0x1e3,0x80,0x80,0x63)
	__mini_line_256(0x1e4,0x80,0x80,0x64)
	__mini_line_256(0x1e5,0x80,0x80,0x65)
	__mini_line_256(0x1e6,0x80,0x80,0x66)
	__mini_line_256(0x1e7,0x80,0x80,0x67)
	__mini_line_256(0x1e8,0x80,0x80,0x68)
	__mini_line_256(0x1e9,0x80,0x80,0x69)
	__mini_line_256(0x1ea,0x80,0x80,0x6a)
	__mini_line_256(0x1eb,0x80,0x80,0x6b)
	__mini_line_256(0x1ec,0x80,0x80,0x6c)
	__mini_line_256(0x1ed,0x80,0x80,0x6d)
	__mini_line_256(0x1ee,0x80,0x80,0x6e)
	__mini_line_256(0x1ef,0x80,0x80,0x6f)
	__mini_line_256(0x1f0,0x80,0x80,0x70)
	__mini_line_256(0x1f1,0x80,0x80,0x71)
	__mini_line_256(0x1f2,0x80,0x80,0x72)
	__mini_line_256(0x1f3,0x80,0x80,0x73)
	__mini_line_256(0x1f4,0x80,0x80,0x74)
	__mini_line_256(0x1f5,0x80,0x80,0x75)
	__mini_line_256(0x1f6,0x80,0x80,0x76)
	__mini_line_256(0x1f7,0x80,0x80,0x77)
	__mini_line_256(0x1f8,0x80,0x80,0x78)
	__mini_line_256(0x1f9,0x80,0x80,0x79)
	__mini_line_256(0x1fa,0x80,0x80,0x7a)
	__mini_line_256(0x1fb,0x80,0x80,0x7b)
	__mini_line_256(0x1fc,0x80,0x80,0x7c)
	__mini_line_256(0x1fd,0x80,0x80,0x7d)
	__mini_line_256(0x1fe,0x80,0x80,0x7e)
	__mini_line_256(0x1ff,0x80,0x80,0x7f)
	case 512: avx_memcpy_512u(dest, src); break;
	default:
		return in_memcpy(dest, src, len);
	}
}

static void* in_memcpy512(void* dest, const void* src, size_t len) {
	if (!dest || !src)
		return nullptr;

	if (len <= 512)
		return in_minicpy512(dest, src, len);

	const size_t toAlign = fast_mod512(len);

	//64 byte align
	in_minicpy256(dest, src, toAlign);
	char *dst_c = (char*) dest + toAlign;
	const char* src_c = (const char*) src + toAlign;
	size_t lCopy = toAlign;

	//bulk copy
	if (src & 511)
		while (lCopy > 64) {
			avx_copy_512u(dst_c, src_c);
			dst_c += 64;
			src_c += 64;
			lCopy -= 64;
		}
	else
		while (lCopy > 64) {
			avx_copy_512(dst_c, src_c);
			dst_c += 64;
			src_c += 64;
			lCopy -= 64;
		}

	//trailing bytes
	in_minicpy512(dst_c, src_c, lCopy);
	return dest;
}

#else

#endif